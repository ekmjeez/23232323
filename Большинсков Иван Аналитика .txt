Большинсков Иван Практика(Аналитика) КЭИ-ИСдо-36
1.Бизнес-процесс создания заказа (использовать любую удобную нотацию моделирования бизнес-процессов). 
Бизнес-процесс создания заказа 

Создание заказа включает несколько этапов, начиная с выбора товара и заканчивая оплатой. Рассмотрим это в виде диаграммы BPMN (Business Process Model and Notation). 

Старт: Пользователь открывает мобильное приложение. 

Выбор товара: Пользователь выбирает товары (например, хлеб, булочки). 

Добавление товара в корзину: Пользователь добавляет выбранные товары в корзину. 

Проверка корзины: Пользователь проверяет содержимое корзины. 

Ввод персональных данных: Если пользователь новый, ему предлагается ввести данные (например, имя, телефон, адрес). 

Редактирование заказа: Пользователь может редактировать заказ — добавлять или удалять товары. 

Подтверждение заказа: Пользователь подтверждает заказ. 

Оплата: Пользователь выбирает способ оплаты и подтверждает оплату. 

Создание заказа на сервере: Система создает заказ в базе данных. 

Завершение: Пользователь получает подтверждение заказа. 
 

Диаграмма BPMN для создания заказа: 

[Старт] --> [Выбор товара] --> [Добавление в корзину] --> [Проверка корзины]  

--> [Ввод данных] --> [Редактирование заказа] --> [Подтверждение заказа]  

--> [Оплата] --> [Создание заказа на сервере] --> [Завершение] 

2.  Опишите процесс синхронизации данных между клиентом и сервером 

(создание, редактирование и отмена заказа, изменение персональных данных, оплата заказа и т.д.). Представить все в диаграммах UML, API методах и других представлениях, также составить ER-диаграмму сущностей. 

Процесс синхронизации данных заключается в обмене информацией между клиентским приложением и сервером. 

API-методы: 

Создание заказа: 

Метод: POST /order/create 

Параметры: {user_id, products[], delivery_address, payment_method} 

Ответ: {order_id, status} 

Редактирование заказа: 

Метод: PUT /order/update/{order_id} 

Параметры: {order_id, updated_products[], updated_delivery_address} 

Ответ: {status} 

Отмена заказа: 

Метод: DELETE /order/cancel/{order_id} 

Параметры: {order_id} 

Ответ: {status} 

Изменение персональных данных: 

Метод: PUT /user/update/{user_id} 

Параметры: {user_id, name, phone, email, address} 

Ответ: {status} 

Оплата заказа: 

Метод: POST /payment/process 

Параметры: {order_id, payment_method, amount} 

Ответ: {status, payment_id} 

Процесс синхронизации: 

При создании заказа на клиенте приложение отправляет данные на сервер. 

Сервер обрабатывает запрос и сохраняет информацию в базе данных. 

При редактировании заказа клиент отправляет обновленные данные. 

Сервер обновляет информацию о заказе. 

После подтверждения оплаты сервер сохраняет статус оплаты в базе данных. 

ER-диаграмма сущностей 

User (user_id, name, phone, email, address) 

| 

|--< Order (order_id, user_id, order_date, delivery_address, status) 

|    | 

|    |--< Order_Product (order_id, product_id, quantity) 

| 

|--< Payment (payment_id, order_id, payment_method, amount, payment_date) 

| 

|--< Product (product_id, name, price, category) 

 

3.Подготовить прототип одного из экранов данного мобильного приложения и описать пользовательский интерфейс для данного экрана (например, создание заказа). 

Предположим, что экран для создания заказа имеет следующую структуру: 

Заголовок: "Создание заказа" 

Список товаров: Перечень доступных товаров с возможностью добавления в корзину. 

Корзина: Товары, выбранные пользователем для заказа. 

Форма ввода данных: Поля для ввода имени, телефона, адреса. 

Оплата: Выбор метода оплаты (например, карта, наличные). 

Кнопка подтверждения: "Оформить заказ". 

 

4.Подготовить подробное описание функции редактирования заказа , которую можно было бы использовать в качестве постановки задачи для разработки (помимо текстового описания, использовать UML диаграммы, указать используемые API методы, передаваемые и получаемые параметры, описать процесс хранения информации о покупках пользователя). 

Метод для редактирования заказа 

Метод: PUT /order/update/{order_id}

Описание: Обновление данных заказа (товары, адрес доставки, способ доставки). 

Параметры запроса (передаваемые): 

order_id (string): ID заказа, который нужно отредактировать. 

updated_products[] (array): Массив объектов с товарами, которые добавляются или удаляются, с указанием нового количества. 

updated_delivery_address (string): Новый адрес доставки (если изменен). 

updated_payment_method (string): Новый способ доставки, если изменился. 

Ответ: 

status (string): Статус выполнения операции (например, "success", "failure"). 

message (string): Сообщение с подробностями (например, "Order updated successfully"). 


Метод для получения текущих данных заказа: 

Метод: GET /order/{order_id} 

Описание: Получение текущих данных о заказе (товары, адрес, способ оплаты). 

Параметры запроса: 

order_id (string): ID заказа для получения информации. 

Ответ: 

order_id (string): ID заказа. 

products[] (array): Массив товаров в заказе. 

delivery_address (string): Адрес доставки. 

payment_method (string): Способ оплаты.

Процесс хранения информации о покупках пользователя
Информация о заказах пользователя сохраняется в базе данных в нескольких таблицах.

Таблица users

Хранит информацию о пользователе (ID, имя, телефон, email и т.д.).
CREATE TABLE users (
  user_id INT PRIMARY KEY,
  name VARCHAR(100),
  phone VARCHAR(20),
  email VARCHAR(100),
  address VARCHAR(255)
);
Таблица orders

Хранит информацию о заказах (ID заказа, дата создания, статус заказа, способ доставки).
CREATE TABLE orders (
  order_id INT PRIMARY KEY,
  user_id INT,
  order_date TIMESTAMP,
  delivery_address VARCHAR(255),
  payment_method VARCHAR(50),
  status VARCHAR(50),
  FOREIGN KEY (user_id) REFERENCES users(user_id)
);
Таблица order_product

Хранит информацию о товарах, добавленных в заказ (ID заказа, ID товара, количество).
CREATE TABLE order_product (
  order_id INT,
  product_id INT,
  quantity INT,
  PRIMARY KEY (order_id, product_id),
  FOREIGN KEY (order_id) REFERENCES orders(order_id),
  FOREIGN KEY (product_id) REFERENCES products(product_id)
);
Таблица products

Хранит информацию о товарах (ID товара, название, цена, категория)
CREATE TABLE products (
  product_id INT PRIMARY KEY,
  name VARCHAR(100),
  price DECIMAL(10, 2),
  category VARCHAR(50)
);

// /, [25.01.2025 12:19]
UML диаграмма последовательности
Диаграмма последовательности описывает взаимодействие между пользователем, мобильным приложением, сервером и базой данных при редактировании заказа.

Пользователь -> Мобильное приложение: Запрос на редактирование заказа
Мобильное приложение -> Сервер: PUT /order/update/{order_id}
Сервер -> База данных: Обновить заказ
База данных -> Сервер: Ответ с результатом
Сервер -> Мобильное приложение: Ответ (статус обновления)
Мобильное приложение -> Пользователь: Уведомление об успешном редактировании

5.Перед вами реляционная модель данных. Необходимо написать SQL-запросы.

1:Вывести покупателей с количеством осуществленных покупок

SELECT   Customers.Identifier AS CustomerID, Customers.Name, Customers.Surname,COUNT(Purchases.Identifier) AS TotalPurchases
FROM  Customers
LEFT JOIN   Purchases ON Customers.Identifier = Purchases.CustomerKey
GROUP BY   Customers.Identifier, Customers.Name, Customers.Surname
ORDER BY  TotalPurchases DESC;


2:Общую стоимость товаров для каждого покупателя и отсортировать результат в порядке убывания

SELECT   Customers.Identifier AS CustomerID,  Customers.Name, Customers.Surname, SUM(Products.Cost) AS TotalSpent
FROM   Customers
JOIN  Purchases ON Customers.Identifier = Purchases.CustomerKey
JOIN  Products ON Purchases.ProductKey = Products.Identifier
GROUP BY Customers.Identifier, Customers.Name, Customers.Surname
ORDER BY TotalSpent DESC;


3:Получить покупателей, купивших только один товар

SELECT Customers.Identifier AS CustomerID,Customers.Name, Customers.Surname
FROM Customers
JOIN Purchases ON Customers.Identifier = Purchases.CustomerKey
GROUP BY Customers.Identifier, Customers.Name, Customers.Surname
HAVING  COUNT(Purchases.ProductKey) = 1;
